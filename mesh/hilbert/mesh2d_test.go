/*
Copyright Â© 2020 the InMAP authors.
This file is part of InMAP.

InMAP is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

InMAP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with InMAP.  If not, see <http://www.gnu.org/licenses/>.
*/

package hilbert

import (
	"flag"
	"image/color"
	"math"
	"os"
	"reflect"
	"testing"

	"github.com/golang/geo/s2"
	"gonum.org/v1/plot"
	"gonum.org/v1/plot/palette/moreland"
	"gonum.org/v1/plot/plotter"

	p "github.com/spatialmodel/inmap/v2/plot"
)

var (
	makePlots   = flag.Bool("plot", false, "make plots")
	deletePlots = flag.Bool("delete_plot", false, "delete previously created plots")
)

func TestNewMesh2D(t *testing.T) {
	flag.Parse()
	b := RectBounds(0.5, -1, 5, 10)
	m := NewMesh2D(b, 5)
	wantCells := []s2.CellID{0x554000000000000, 0x55c000000000000, 0x564000000000000,
		0xf8c000000000000, 0xf94000000000000, 0xfe4000000000000, 0xfec000000000000,
		0xff4000000000000, 0xffc000000000000, 0x1004000000000000, 0x100c000000000000,
		0x1014000000000000, 0x101c000000000000, 0x1aa4000000000000, 0x1aac000000000000}
	if !reflect.DeepEqual(m.cells, wantCells) {
		t.Errorf("%v != %v", m.cells, wantCells)
	}

	area := make([]float64, m.Cells())
	for i := range area {
		area[i] = m.Cell(i).Measure()
	}
	t.Run("area", func(t *testing.T) {
		wantArea := []float64{7.49464116446773e+10, 7.902761146212224e+10, 8.250882873351524e+10, 8.250882873351524e+10,
			8.700802834343593e+10, 7.902761146212224e+10, 8.333296281852644e+10, 7.902761146212224e+10, 7.49464116446773e+10,
			7.49464116446773e+10, 7.902761146212224e+10, 8.333296281852644e+10, 7.902761146212224e+10, 7.902761146212224e+10, 7.49464116446773e+10}
		if !reflect.DeepEqual(area, wantArea) {
			t.Error("incorrect area")
		}
	})

	length := make([]float64, m.Faces())
	for i := range length {
		length[i] = m.Face(i).Measure()
	}

	t.Run("length", func(t *testing.T) {
		wantLength := []float64{273638.3202932719, 273890.5047100122, 273890.5047100122, 273638.32029327186,
			289103.8702850395, 289368.2512161277, 272824.48055887135, 303101.47058705083, 303374.0531557181, 271369.1170403156,
			272824.48055887135, 303101.47058705083, 271369.1170403156, 288250.6319340329, 302221.6776652276, 286724.6670151575,
			273638.3202932719, 289368.2512161277, 272824.48055887135, 289103.8702850395, 289103.8702850395, 288250.6319340329,
			273638.32029327186, 273890.5047100122, 273890.5047100122, 273638.32029327186, 273638.3202932719, 289368.2512161277,
			272824.48055887135, 289103.8702850395, 288250.6319340329, 288250.6319340329, 289103.8702850395, 272824.48055887135,
			289103.8702850395, 272824.48055887135, 273638.32029327186, 273638.3202932719}
		if !reflect.DeepEqual(length, wantLength) {
			t.Error("incorrect length")
		}
	})

	t.Run("Plot", func(t *testing.T) {
		proj := s2.NewPlateCarreeProjection(180)
		polys := m.PlotCells(proj)
		wantPolys := []p.XYs{
			p.XYs{p.XY{X: -2.4604145385916953, Y: -2.4581491142900713}, p.XY{X: 0, Y: -2.4604145385916953}, p.XY{X: 0, Y: 0}, p.XY{X: -2.4604145385916953, Y: 0}, p.XY{X: -2.4604145385916953, Y: -2.4581491142900713}},
			p.XYs{p.XY{X: -5.059868846264116, Y: -2.4508382251567564}, p.XY{X: -3.7601452475075376, Y: -2.455124558052912}, p.XY{X: -2.4604145385916953, Y: -2.4581491142900713}, p.XY{X: -2.4604145385916953, Y: 0}, p.XY{X: -5.059868846264116, Y: 0}, p.XY{X: -5.059868846264116, Y: -2.4508382251567564}},
			p.XYs{p.XY{X: -7.785140143296169, Y: -2.4377643963879136}, p.XY{X: -6.422511132325342, Y: -2.444991890854041}, p.XY{X: -5.059868846264116, Y: -2.4508382251567564}, p.XY{X: -5.059868846264116, Y: 0}, p.XY{X: -7.785140143296169, Y: 0}, p.XY{X: -7.785140143296169, Y: -2.4377643963879136}},
			p.XYs{p.XY{X: -7.785140143296169, Y: 0}, p.XY{X: -5.059868846264116, Y: 0}, p.XY{X: -5.059868846264116, Y: 2.4508382251567564}, p.XY{X: -6.422511132325342, Y: 2.444991890854041}, p.XY{X: -7.785140143296169, Y: 2.4377643963879136}, p.XY{X: -7.785140143296169, Y: 0}},
			p.XYs{p.XY{X: -7.785140143296169, Y: 2.4377643963879136}, p.XY{X: -6.422511132325342, Y: 2.444991890854041}, p.XY{X: -5.059868846264116, Y: 2.4508382251567564}, p.XY{X: -5.059868846264116, Y: 5.040252729758283}, p.XY{X: -6.422532513016229, Y: 5.028276446197815}, p.XY{X: -7.785140143296169, Y: 5.013470845371532}, p.XY{X: -7.785140143296169, Y: 2.4377643963879136}},
			p.XYs{p.XY{X: -2.4604145385916953, Y: 2.4581491142900713}, p.XY{X: 0, Y: 2.4604145385916953}, p.XY{X: 0, Y: 5.059868846264116}, p.XY{X: -1.2302116788679305, Y: 5.058708607371141}, p.XY{X: -2.4604145385916953, Y: 5.055228433872765}, p.XY{X: -2.4604145385916953, Y: 2.4581491142900713}},
			p.XYs{p.XY{X: -5.059868846264116, Y: 2.4508382251567564}, p.XY{X: -3.7601452475075376, Y: 2.455124558052912}, p.XY{X: -2.4604145385916953, Y: 2.4581491142900713}, p.XY{X: -2.4604145385916953, Y: 5.055228433872765}, p.XY{X: -3.760156698303961, Y: 5.049032898294641}, p.XY{X: -5.059868846264116, Y: 5.040252729758283}, p.XY{X: -5.059868846264116, Y: 2.4508382251567564}},
			p.XYs{p.XY{X: -5.059868846264116, Y: 0}, p.XY{X: -2.4604145385916953, Y: 0}, p.XY{X: -2.4604145385916953, Y: 2.4581491142900713}, p.XY{X: -3.7601452475075376, Y: 2.455124558052912}, p.XY{X: -5.059868846264116, Y: 2.4508382251567564}, p.XY{X: -5.059868846264116, Y: 0}},
			p.XYs{p.XY{X: -2.4604145385916953, Y: 0}, p.XY{X: 0, Y: 0}, p.XY{X: 0, Y: 2.4604145385916953}, p.XY{X: -2.4604145385916953, Y: 2.4581491142900713}, p.XY{X: -2.4604145385916953, Y: 0}},
			p.XYs{p.XY{X: 0, Y: 0}, p.XY{X: 2.4604145385916953, Y: 0}, p.XY{X: 2.4604145385916953, Y: 2.4581491142900713}, p.XY{X: 0, Y: 2.4604145385916953}, p.XY{X: 0, Y: 0}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: 0}, p.XY{X: 5.059868846264116, Y: 0}, p.XY{X: 5.059868846264116, Y: 2.4508382251567564}, p.XY{X: 3.7601452475075376, Y: 2.455124558052912}, p.XY{X: 2.4604145385916953, Y: 2.4581491142900713}, p.XY{X: 2.4604145385916953, Y: 0}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: 2.4581491142900713}, p.XY{X: 3.7601452475075376, Y: 2.455124558052912}, p.XY{X: 5.059868846264116, Y: 2.4508382251567564}, p.XY{X: 5.059868846264116, Y: 5.040252729758283}, p.XY{X: 3.760156698303961, Y: 5.049032898294641}, p.XY{X: 2.4604145385916953, Y: 5.055228433872765}, p.XY{X: 2.4604145385916953, Y: 2.4581491142900713}},
			p.XYs{p.XY{X: 0, Y: 2.4604145385916953}, p.XY{X: 2.4604145385916953, Y: 2.4581491142900713}, p.XY{X: 2.4604145385916953, Y: 5.055228433872765}, p.XY{X: 1.2302116788679305, Y: 5.058708607371141}, p.XY{X: 0, Y: 5.059868846264116}, p.XY{X: 0, Y: 2.4604145385916953}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: -2.4581491142900713}, p.XY{X: 3.7601452475075376, Y: -2.455124558052912}, p.XY{X: 5.059868846264116, Y: -2.4508382251567564}, p.XY{X: 5.059868846264116, Y: 0}, p.XY{X: 2.4604145385916953, Y: 0}, p.XY{X: 2.4604145385916953, Y: -2.4581491142900713}},
			p.XYs{p.XY{X: 0, Y: -2.4604145385916953}, p.XY{X: 2.4604145385916953, Y: -2.4581491142900713}, p.XY{X: 2.4604145385916953, Y: 0}, p.XY{X: 0, Y: 0}, p.XY{X: 0, Y: -2.4604145385916953}},
		}

		if !reflect.DeepEqual(polys, wantPolys) {
			t.Errorf("incorrect polygons")
		}

		boundaryPolys := m.PlotBoundaryCells(proj)
		wantBoundaryPolys := []p.XYs{
			p.XYs{p.XY{X: -2.4604145385916953, Y: -5.055228433872765}, p.XY{X: -1.2302116788679305, Y: -5.058708607371141}, p.XY{X: 0, Y: -5.059868846264116}, p.XY{X: 0, Y: -2.4604145385916953}, p.XY{X: -2.4604145385916953, Y: -2.4581491142900713}, p.XY{X: -2.4604145385916953, Y: -5.055228433872765}},
			p.XYs{p.XY{X: -5.059868846264116, Y: -5.040252729758283}, p.XY{X: -3.760156698303961, Y: -5.049032898294641}, p.XY{X: -2.4604145385916953, Y: -5.055228433872765}, p.XY{X: -2.4604145385916953, Y: -2.4581491142900713}, p.XY{X: -3.7601452475075376, Y: -2.455124558052912}, p.XY{X: -5.059868846264116, Y: -2.4508382251567564}, p.XY{X: -5.059868846264116, Y: -5.040252729758283}},
			p.XYs{p.XY{X: -7.785140143296169, Y: -5.013470845371532}, p.XY{X: -6.422532513016229, Y: -5.028276446197815}, p.XY{X: -5.059868846264116, Y: -5.040252729758283}, p.XY{X: -5.059868846264116, Y: -2.4508382251567564}, p.XY{X: -6.422511132325342, Y: -2.444991890854041}, p.XY{X: -7.785140143296169, Y: -2.4377643963879136}, p.XY{X: -7.785140143296169, Y: -5.013470845371532}},
			p.XYs{p.XY{X: -10.619655276155134, Y: -2.4183234853878917}, p.XY{X: -9.202407907264163, Y: -2.428786052574922}, p.XY{X: -7.785140143296169, Y: -2.4377643963879136}, p.XY{X: -7.785140143296169, Y: 0}, p.XY{X: -10.619655276155134, Y: 0}, p.XY{X: -10.619655276155134, Y: -2.4183234853878917}},
			p.XYs{p.XY{X: -10.619655276155134, Y: 0}, p.XY{X: -7.785140143296169, Y: 0}, p.XY{X: -7.785140143296169, Y: 2.4377643963879136}, p.XY{X: -9.202407907264163, Y: 2.428786052574922}, p.XY{X: -10.619655276155134, Y: 2.4183234853878917}, p.XY{X: -10.619655276155134, Y: 0}},
			p.XYs{p.XY{X: -7.785140143296169, Y: 5.013470845371532}, p.XY{X: -6.422532513016229, Y: 5.028276446197815}, p.XY{X: -5.059868846264116, Y: 5.040252729758283}, p.XY{X: -5.059868846264116, Y: 7.755172001576021}, p.XY{X: -6.4225705960912025, Y: 7.73687368475495}, p.XY{X: -7.785140143296169, Y: 7.714252526909326}, p.XY{X: -7.785140143296169, Y: 5.013470845371532}},
			p.XYs{p.XY{X: -10.619655276155134, Y: 2.4183234853878917}, p.XY{X: -9.202407907264163, Y: 2.428786052574922}, p.XY{X: -7.785140143296169, Y: 2.4377643963879136}, p.XY{X: -7.785140143296169, Y: 5.013470845371532}, p.XY{X: -9.20244075866032, Y: 4.995077174703521}, p.XY{X: -10.619655276155136, Y: 4.973642825000523}, p.XY{X: -10.619655276155134, Y: 2.4183234853878917}},
			p.XYs{p.XY{X: -2.4604145385916953, Y: 5.055228433872765}, p.XY{X: -1.2302116788679305, Y: 5.058708607371141}, p.XY{X: 0, Y: 5.059868846264116}, p.XY{X: 0, Y: 7.785140143296169}, p.XY{X: -1.2302176711312374, Y: 7.78336766215856}, p.XY{X: -2.4604145385916953, Y: 7.778051065823764}, p.XY{X: -2.4604145385916953, Y: 5.055228433872765}},
			p.XYs{p.XY{X: -5.059868846264116, Y: 5.040252729758283}, p.XY{X: -3.760156698303961, Y: 5.049032898294641}, p.XY{X: -2.4604145385916953, Y: 5.055228433872765}, p.XY{X: -2.4604145385916953, Y: 7.778051065823764}, p.XY{X: -3.760177091570374, Y: 7.768585858980449}, p.XY{X: -5.059868846264116, Y: 7.755172001576021}, p.XY{X: -5.059868846264116, Y: 5.040252729758283}},
			p.XYs{p.XY{X: 5.059868846264116, Y: 0}, p.XY{X: 7.785140143296169, Y: 0}, p.XY{X: 7.785140143296169, Y: 2.4377643963879136}, p.XY{X: 6.422511132325342, Y: 2.444991890854041}, p.XY{X: 5.059868846264116, Y: 2.4508382251567564}, p.XY{X: 5.059868846264116, Y: 0}},
			p.XYs{p.XY{X: 5.059868846264116, Y: 2.4508382251567564}, p.XY{X: 6.422511132325342, Y: 2.444991890854041}, p.XY{X: 7.785140143296169, Y: 2.4377643963879136}, p.XY{X: 7.785140143296169, Y: 5.013470845371532}, p.XY{X: 6.422532513016229, Y: 5.028276446197815}, p.XY{X: 5.059868846264116, Y: 5.040252729758283}, p.XY{X: 5.059868846264116, Y: 2.4508382251567564}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: 5.055228433872765}, p.XY{X: 3.760156698303961, Y: 5.049032898294641}, p.XY{X: 5.059868846264116, Y: 5.040252729758283}, p.XY{X: 5.059868846264116, Y: 7.755172001576021}, p.XY{X: 3.760177091570374, Y: 7.768585858980449}, p.XY{X: 2.4604145385916953, Y: 7.778051065823764}, p.XY{X: 2.4604145385916953, Y: 5.055228433872765}},
			p.XYs{p.XY{X: 0, Y: 5.059868846264116}, p.XY{X: 1.2302116788679305, Y: 5.058708607371141}, p.XY{X: 2.4604145385916953, Y: 5.055228433872765}, p.XY{X: 2.4604145385916953, Y: 7.778051065823764}, p.XY{X: 1.2302176711312374, Y: 7.78336766215856}, p.XY{X: 0, Y: 7.785140143296169}, p.XY{X: 0, Y: 5.059868846264116}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: -5.055228433872765}, p.XY{X: 3.760156698303961, Y: -5.049032898294641}, p.XY{X: 5.059868846264116, Y: -5.040252729758283}, p.XY{X: 5.059868846264116, Y: -2.4508382251567564}, p.XY{X: 3.7601452475075376, Y: -2.455124558052912}, p.XY{X: 2.4604145385916953, Y: -2.4581491142900713}, p.XY{X: 2.4604145385916953, Y: -5.055228433872765}},
			p.XYs{p.XY{X: 5.059868846264116, Y: -2.4508382251567564}, p.XY{X: 6.422511132325342, Y: -2.444991890854041}, p.XY{X: 7.785140143296169, Y: -2.4377643963879136}, p.XY{X: 7.785140143296169, Y: 0}, p.XY{X: 5.059868846264116, Y: 0}, p.XY{X: 5.059868846264116, Y: -2.4508382251567564}},
			p.XYs{p.XY{X: 0, Y: -5.059868846264116}, p.XY{X: 1.2302116788679305, Y: -5.058708607371141}, p.XY{X: 2.4604145385916953, Y: -5.055228433872765}, p.XY{X: 2.4604145385916953, Y: -2.4581491142900713}, p.XY{X: 0, Y: -2.4604145385916953}, p.XY{X: 0, Y: -5.059868846264116}}}

		if !reflect.DeepEqual(boundaryPolys, wantBoundaryPolys) {
			t.Errorf("incorrect boundary polygons")
		}

		lines := m.PlotEdges(proj)

		wantLines := []p.XYs{
			p.XYs{p.XY{X: -2.4604145385916953, Y: -2.4581491142900713}, p.XY{X: 0, Y: -2.4604145385916953}},
			p.XYs{p.XY{X: 0, Y: -2.4604145385916953}, p.XY{X: 0, Y: 0}},
			p.XYs{p.XY{X: 0, Y: 0}, p.XY{X: -2.4604145385916953, Y: 0}},
			p.XYs{p.XY{X: -2.4604145385916953, Y: 0}, p.XY{X: -2.4604145385916953, Y: -2.4581491142900713}},
			p.XYs{p.XY{X: -5.059868846264116, Y: -2.4508382251567564}, p.XY{X: -3.7601452475075376, Y: -2.455124558052912}, p.XY{X: -2.4604145385916953, Y: -2.4581491142900713}},
			p.XYs{p.XY{X: -2.4604145385916953, Y: 0}, p.XY{X: -5.059868846264116, Y: 0}},
			p.XYs{p.XY{X: -5.059868846264116, Y: 0}, p.XY{X: -5.059868846264116, Y: -2.4508382251567564}},
			p.XYs{p.XY{X: -7.785140143296169, Y: -2.4377643963879136}, p.XY{X: -6.422511132325342, Y: -2.444991890854041}, p.XY{X: -5.059868846264116, Y: -2.4508382251567564}},
			p.XYs{p.XY{X: -5.059868846264116, Y: 0}, p.XY{X: -7.785140143296169, Y: 0}},
			p.XYs{p.XY{X: -7.785140143296169, Y: 0}, p.XY{X: -7.785140143296169, Y: -2.4377643963879136}},
			p.XYs{p.XY{X: -5.059868846264116, Y: 0}, p.XY{X: -5.059868846264116, Y: 2.4508382251567564}},
			p.XYs{p.XY{X: -5.059868846264116, Y: 2.4508382251567564}, p.XY{X: -6.422511132325342, Y: 2.444991890854041}, p.XY{X: -7.785140143296169, Y: 2.4377643963879136}},
			p.XYs{p.XY{X: -7.785140143296169, Y: 2.4377643963879136}, p.XY{X: -7.785140143296169, Y: 0}},
			p.XYs{p.XY{X: -5.059868846264116, Y: 2.4508382251567564}, p.XY{X: -5.059868846264116, Y: 5.040252729758283}},
			p.XYs{p.XY{X: -5.059868846264116, Y: 5.040252729758283}, p.XY{X: -6.422532513016229, Y: 5.028276446197815}, p.XY{X: -7.785140143296169, Y: 5.013470845371532}},
			p.XYs{p.XY{X: -7.785140143296169, Y: 5.013470845371532}, p.XY{X: -7.785140143296169, Y: 2.4377643963879136}},
			p.XYs{p.XY{X: -2.4604145385916953, Y: 2.4581491142900713}, p.XY{X: 0, Y: 2.4604145385916953}},
			p.XYs{p.XY{X: 0, Y: 2.4604145385916953}, p.XY{X: 0, Y: 5.059868846264116}},
			p.XYs{p.XY{X: 0, Y: 5.059868846264116}, p.XY{X: -1.2302116788679305, Y: 5.058708607371141}, p.XY{X: -2.4604145385916953, Y: 5.055228433872765}},
			p.XYs{p.XY{X: -2.4604145385916953, Y: 5.055228433872765}, p.XY{X: -2.4604145385916953, Y: 2.4581491142900713}},
			p.XYs{p.XY{X: -5.059868846264116, Y: 2.4508382251567564}, p.XY{X: -3.7601452475075376, Y: 2.455124558052912}, p.XY{X: -2.4604145385916953, Y: 2.4581491142900713}},
			p.XYs{p.XY{X: -2.4604145385916953, Y: 5.055228433872765}, p.XY{X: -3.760156698303961, Y: 5.049032898294641}, p.XY{X: -5.059868846264116, Y: 5.040252729758283}},
			p.XYs{p.XY{X: -2.4604145385916953, Y: 0}, p.XY{X: -2.4604145385916953, Y: 2.4581491142900713}},
			p.XYs{p.XY{X: 0, Y: 0}, p.XY{X: 0, Y: 2.4604145385916953}},
			p.XYs{p.XY{X: 0, Y: 0}, p.XY{X: 2.4604145385916953, Y: 0}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: 0}, p.XY{X: 2.4604145385916953, Y: 2.4581491142900713}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: 2.4581491142900713}, p.XY{X: 0, Y: 2.4604145385916953}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: 0}, p.XY{X: 5.059868846264116, Y: 0}},
			p.XYs{p.XY{X: 5.059868846264116, Y: 0}, p.XY{X: 5.059868846264116, Y: 2.4508382251567564}},
			p.XYs{p.XY{X: 5.059868846264116, Y: 2.4508382251567564}, p.XY{X: 3.7601452475075376, Y: 2.455124558052912}, p.XY{X: 2.4604145385916953, Y: 2.4581491142900713}},
			p.XYs{p.XY{X: 5.059868846264116, Y: 2.4508382251567564}, p.XY{X: 5.059868846264116, Y: 5.040252729758283}},
			p.XYs{p.XY{X: 5.059868846264116, Y: 5.040252729758283}, p.XY{X: 3.760156698303961, Y: 5.049032898294641}, p.XY{X: 2.4604145385916953, Y: 5.055228433872765}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: 5.055228433872765}, p.XY{X: 2.4604145385916953, Y: 2.4581491142900713}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: 5.055228433872765}, p.XY{X: 1.2302116788679305, Y: 5.058708607371141}, p.XY{X: 0, Y: 5.059868846264116}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: -2.4581491142900713}, p.XY{X: 3.7601452475075376, Y: -2.455124558052912}, p.XY{X: 5.059868846264116, Y: -2.4508382251567564}},
			p.XYs{p.XY{X: 5.059868846264116, Y: -2.4508382251567564}, p.XY{X: 5.059868846264116, Y: 0}},
			p.XYs{p.XY{X: 2.4604145385916953, Y: 0}, p.XY{X: 2.4604145385916953, Y: -2.4581491142900713}},
			p.XYs{p.XY{X: 0, Y: -2.4604145385916953}, p.XY{X: 2.4604145385916953, Y: -2.4581491142900713}}}
		if !reflect.DeepEqual(lines, wantLines) {
			t.Errorf("incorrect lines")
		}

		if *makePlots {
			plt, err := plot.New()
			if err != nil {
				t.Fatal(err)
			}

			cm := moreland.SmoothBlueRed()
			cm.SetMax(math.Inf(-1))
			cm.SetMin(math.Inf(1))
			for _, a := range area {
				if a > cm.Max() {
					cm.SetMax(a)
				}
				if a < cm.Min() {
					cm.SetMin(a)
				}
			}

			for i, poly := range polys {
				plotPoly, err := plotter.NewPolygon(poly)
				if err != nil {
					t.Fatal(err)
				}
				plotPoly.Color, err = cm.At(area[i])
				if err != nil {
					t.Fatal(err)
				}
				plotPoly.LineStyle.Width = 0
				plt.Add(plotPoly)
			}

			for _, poly := range boundaryPolys {
				plotPoly, err := plotter.NewPolygon(poly)
				if err != nil {
					t.Fatal(err)
				}
				plotPoly.Color = color.Black
				plotPoly.LineStyle.Width = 0
				plt.Add(plotPoly)
			}

			cm2 := moreland.SmoothGreenPurple()
			cm2.SetMax(math.Inf(-1))
			cm2.SetMin(math.Inf(1))
			for _, l := range length {
				if l > cm2.Max() {
					cm2.SetMax(l)
				}
				if l < cm2.Min() {
					cm2.SetMin(l)
				}
			}
			for i, line := range lines {
				plotLine, err := plotter.NewLine(line)
				if err != nil {
					t.Fatal(err)
				}
				plotLine.Color, err = cm2.At(length[i])
				if err != nil {
					t.Fatal(err)
				}
				plotLine.LineStyle.Width = 3
				plt.Add(plotLine)
			}

			if err := plt.Save(100, 100, "TestNewMesh2D.png"); err != nil {
				t.Fatal(err)
			}
		} else if *deletePlots {
			os.Remove("TestNewMesh2D.png")
		}
	})
}

func TestMesh2D_wrapLat(t *testing.T) {
	flag.Parse()
	b := RectBounds(90, 0, 5, 5)
	m := NewMesh2D(b, 5)

	if *makePlots {
		polys := m.PlotCells(s2.NewPlateCarreeProjection(180))
		p, err := plot.New()
		if err != nil {
			t.Fatal(err)
		}
		for _, poly := range polys {
			plotPolys, err := plotter.NewPolygon(poly)
			if err != nil {
				t.Fatal(err)
			}
			p.Add(plotPolys)
		}
		if err := p.Save(100, 100, "TestMesh2D_wrapLat.png"); err != nil {
			t.Fatal(err)
		}
	} else if *deletePlots {
		os.Remove("TestMesh2D_wrapLat.png")
	}
}

func TestMesh2D_MarshalBinary(t *testing.T) {
	b := RectBounds(0.5, -1, 5, 10)
	m := NewMesh2D(b, 5)

	byt := m.MarshalBinary()

	newM := new(Mesh2D)
	newM.UnmarshalBinary(byt)
	if !reflect.DeepEqual(m, newM) {
		t.Errorf("meshes don't match")
	}
}
